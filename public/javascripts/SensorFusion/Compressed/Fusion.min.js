function FusionAhrsInitialise(e,n,i,a){e.gain=n,e.minMagneticFieldSquared=i*i,e.maxMagneticFieldSquared=a*a,e.quaternion=clone(FUSION_QUATERNION_IDENTITY),e.linearAcceleration=clone(FUSION_VECTOR3_ZERO),e.rampedGain=clone(10),e.quaternion.element.w=1,e.quaternion.element.x=0,e.quaternion.element.y=0,e.quaternion.element.z=0}function FusionAhrsUpdate(e,n,i,a,t){var o=e.quaternion.element,r=clone(FUSION_VECTOR3_ZERO);if(0!=i.axis.x&&0!=i.axis.y&&0!=i.axis.z){var s=clone(FusionVector3);s.axis.x=o.x*o.z-o.w*o.y,s.axis.y=o.w*o.x+o.y*o.z,s.axis.z=o.w*o.w-.5+o.z*o.z,r=FusionVectorCrossProduct(FusionVectorFastNormalise(i),s);var u=a.axis.x*a.axis.x+a.axis.y*a.axis.y+a.axis.z*a.axis.z;if(u>e.minMagneticFieldSquared||u<e.maxMagneticFieldSquared){var l=clone(FusionVector3);l.axis.x=o.x*o.y+o.w*o.z,l.axis.y=o.w*o.w-.5+o.y*o.y,l.axis.z=o.y*o.z-o.w*o.x,r=FusionVectorAdd(r,FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(i,a)),l)),0==e.gain&&(e.rampedGain=0);var x=e.gain;e.rampedGain>e.gain&&(e.rampedGain-=(10-e.gain)*t/3,x=e.rampedGain);var c=FusionVectorMultiplyScalar(n,.5*FUSION_DEGREES_TO_RADIANS(1));c=FusionVectorAdd(c,FusionVectorMultiplyScalar(r,x)),e.quaternion=FusionQuaternionAdd(e.quaternion,FusionQuaternionMultiplyVector(e.quaternion,FusionVectorMultiplyScalar(c,t))),e.quaternion=FusionQuaternionFastNormalise(e.quaternion);var y=clone(FusionVector3);y.axis.x=2*(o.x*o.z-o.w*o.y),y.axis.y=2*(o.w*o.x+o.y*o.z),y.axis.z=2*(o.w*o.w-.5+o.z*o.z),e.linearAcceleration=FusionVectorSubtract(i,y)}}}function FusionAhrsCalculateEarthAcceleration(e){var n=e.quaternion.element,i=e.linearAcceleration.axis,a=n.w*n.w,t=n.w*n.x,o=n.w*n.y,r=n.w*n.z,s=n.x*n.y,u=n.x*n.z,l=n.y*n.z,x=clone(FusionVector3);return x.axis.x=2*((a-.5+n.x*n.x)*i.x+(s-r)*i.y+(u+o)*i.z),x.axis.y=2*((s+r)*i.x+(a-.5+n.y*n.y)*i.y+(l-t)*i.z),x.axis.z=2*((u-o)*i.x+(l+t)*i.y+(a-.5+n.z*n.z)*i.z),x}function FusionAhrsIsInitialising(e){return e.rampedGain>e.gain}function FusionAhrsReinitialise(e){e.quaternion=clone(FUSION_QUATERNION_IDENTITY),e.linearAcceleration=clone(FUSION_VECTOR3_ZERO),e.rampedGain=clone(10)}function FusionAhrsZeroYaw(e){var n=e.quaternion.element;e.quaternion=FusionQuaternionNormalise(e.quaternion);var i=.5*Math.atan2(n.x*n.y+n.w*n.z,n.w*n.w-.5+n.x*n.x),a=clone(FusionQuaternion);a.element.w=Math.cos(i),a.element.x=0,a.element.y=0,a.element.z=-1*Math.sin(i),e.quaternion=FusionQuaternionMultiply(a,e.quaternion)}function FusionBiasInitialise(e,n,i){e.adcThreshold=n,e.samplePeriod=i,e.stationaryTimer=0,e.gyroscopeBias=clone(FUSION_VECTOR3_ZERO)}function FusionBiasUpdate(e,n,i,a){if(n>e.adcThreshold||n<-1*e.adcThreshold||i>e.adcThreshold||i<-1*e.adcThreshold||a>e.adcThreshold||a<-1*e.adcThreshold)e.stationaryTimer=0;else if(e.stationaryTimer>=5){var t=clone(FusionVector3);t.axis.x=parseFloat(n),t.axis.y=parseFloat(i),t.axis.z=parseFloat(a),t=FusionVectorSubtract(t,e.gyroscopeBias),e.gyroscopeBias=FusionVectorAdd(e.gyroscopeBias,FusionVectorMultiplyScalar(t,2*M_PI*.02*e.samplePeriod))}else e.stationaryTimer+=e.samplePeriod}function FusionBiasIsActive(e){return e.stationaryTimer>=5}function FusionCompassCalculateHeading(e,n){var i=FusionVectorFastNormalise(FusionVectorCrossProduct(e,n)),a=FusionVectorFastNormalise(FusionVectorCrossProduct(i,e));return FUSION_RADIANS_TO_DEGREES(Math.atan2(i.axis.x,a.axis.x))}function FUSION_DEGREES_TO_RADIANS(e){return e*(M_PI/180)}function FUSION_RADIANS_TO_DEGREES(e){return e*(180/M_PI)}function FusionFastInverseSqrt(e){var n=new ArrayBuffer(4),i=new Float32Array(n),a=new Uint32Array(n),t=.5*(i[0]=e);a[0]=1597463007-(a[0]>>1);var o=i[0];return o*=1.5-t*o*o}function FusionVectorAdd(e,n){var i=clone(FusionVector3);return i.axis.x=e.axis.x+n.axis.x,i.axis.y=e.axis.y+n.axis.y,i.axis.z=e.axis.z+n.axis.z,i}function FusionVectorSubtract(e,n){var i=clone(FusionVector3);return i.axis.x=e.axis.x-n.axis.x,i.axis.y=e.axis.y-n.axis.y,i.axis.z=e.axis.z-n.axis.z,i}function FusionVectorMultiplyScalar(e,n){var i=clone(FusionVector3);return i.axis.x=e.axis.x*n,i.axis.y=e.axis.y*n,i.axis.z=e.axis.z*n,i}function FusionVectorCrossProduct(e,n){var i=e.axis,a=n.axis,t=clone(FusionVector3);return t.axis.x=i.y*a.z-i.z*a.y,t.axis.y=i.z*a.x-i.x*a.z,t.axis.z=i.x*a.y-i.y*a.x,t}function FusionVectorNormalise(e){var n=e.axis;return FusionVectorMultiplyScalar(e,1/Math.sqrt(n.x*n.x+n.y*n.y+n.z*n.z))}function FusionVectorFastNormalise(e){var n=e.axis;return FusionVectorMultiplyScalar(e,FusionFastInverseSqrt(n.x*n.x+n.y*n.y+n.z*n.z))}function FusionVectorMagnitude(e){var n=e.axis;return Math.sqrt(n.x*n.x+n.y*n.y+n.z*n.z)}function FusionQuaternionAdd(e,n){var i=clone(FusionQuaternion);return i.element.w=e.element.w+n.element.w,i.element.x=e.element.x+n.element.x,i.element.y=e.element.y+n.element.y,i.element.z=e.element.z+n.element.z,i}function FusionQuaternionMultiply(e,n){var i=e.element,a=n.element,t=clone(FusionQuaternion);return t.element.w=i.w*a.w-i.x*a.x-i.y*a.y-i.z*a.z,t.element.x=i.w*a.x+i.x*a.w+i.y*a.z-i.z*a.y,t.element.y=i.w*a.y-i.x*a.z+i.y*a.w+i.z*a.x,t.element.z=i.w*a.z+i.x*a.y-i.y*a.x+i.z*a.w,t}function FusionQuaternionMultiplyVector(e,n){var i=e.element,a=n.axis,t=clone(FusionQuaternion);return t.element.w=-i.x*a.x-i.y*a.y-i.z*a.z,t.element.x=i.w*a.x+i.y*a.z-i.z*a.y,t.element.y=i.w*a.y-i.x*a.z+i.z*a.x,t.element.z=i.w*a.z+i.x*a.y-i.y*a.x,t}function FusionQuaternionConjugate(e){var n=clone(FusionQuaternion);return n.element.w=e.element.w,n.element.x=-1*e.element.x,n.element.y=-1*e.element.y,n.element.z=-1*e.element.z,n}function FusionQuaternionNormalise(e){var n=e.element,i=1/Math.sqrt(n.w*n.w+n.x*n.x+n.y*n.y+n.z*n.z),a=clone(FusionQuaternion);return a.element.w=n.w*i,a.element.x=n.x*i,a.element.y=n.y*i,a.element.z=n.z*i,a}function FusionQuaternionFastNormalise(e){var n=e.element,i=FusionFastInverseSqrt(n.w*n.w+n.x*n.x+n.y*n.y+n.z*n.z),a=clone(FusionQuaternion);return a.element.w=n.w*i,a.element.x=n.x*i,a.element.y=n.y*i,a.element.z=n.z*i,a}function FusionQuaternionToRotationMatrix(e){var n=e.element,i=n.w*n.w,a=n.w*n.x,t=n.w*n.y,o=n.w*n.z,r=n.x*n.y,s=n.x*n.z,u=n.y*n.z,l=clone(FusionRotationMatrix);return l.element.xx=2*(i-.5+n.x*n.x),l.element.xy=2*(r+o),l.element.xz=2*(s-t),l.element.yx=2*(r-o),l.element.yy=2*(i-.5+n.y*n.y),l.element.yz=2*(u+a),l.element.zx=2*(s+t),l.element.zy=2*(u-a),l.element.zz=2*(i-.5+n.z*n.z),l} export function FusionQuaternionToEulerAngles(e){var n=e.element,i=n.w*n.w-.5,a=clone(FusionEulerAngles);return a.angle.roll=FUSION_RADIANS_TO_DEGREES(Math.atan2(n.y*n.z-n.w*n.x,i+n.z*n.z)),a.angle.pitch=FUSION_RADIANS_TO_DEGREES(-1*Math.asin(2*(n.x*n.z+n.w*n.y))),a.angle.yaw=FUSION_RADIANS_TO_DEGREES(Math.atan2(n.x*n.y-n.w*n.z,i+n.x*n.x)),a}function clone(e){return JSON.parse(e)}const FusionAhrs='{"gain":0,"minMagneticFieldSquared":0,"maxMagneticFieldSquared":0,"quaternion":{"element":{"w":0,"x":0,"y":0,"z":0}},"linearAcceleration":{"axis":{"x":0,"y":0,"z":0}},"rampedGain":0}',INITIAL_GAIN=10,INITIALISATION_PERIOD=3,FusionBias='{"adcThreshold":0,"samplePeriod":0,"stationaryTimer":0,"gyroscopeBias":{"axis":{"x":0,"y":0,"z":0}}}',STATIONARY_PERIOD=5,CORNER_FREQUENCY=.02,FusionVector3='{"axis":{"x":0,"y":0,"z":0}}',FusionQuaternion='{"element":{"w":0,"x":0,"y":0,"z":0}}',FusionRotationMatrix='{"element":{"xx":0,"xy":0,"xz":0,"yx":0,"yy":0,"yz":0,"zx":0,"zy":0,"zz":0}}',FusionEulerAngles='{"angle":{"roll":0,"pitch":0,"yaw":0}}',FUSION_VECTOR3_ZERO='{"axis":{"x":0,"y":0,"z":0}}',FUSION_QUATERNION_IDENTITY='{"element":{"w":0,"x":0,"y":0,"z":0}}',FUSION_ROTATION_MATRIX_IDENTITY='{"element":{"xx":0,"xy":0,"xz":0,"yx":0,"yy":0,"yz":0,"zx":0,"zy":0,"zz":0}}',FUSION_EULER_ANGLES_ZERO='{"roll":0,"pitch":0,"yaw":0}',M_PI=3.141592653589793;